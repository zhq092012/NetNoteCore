using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Threading.Tasks;using Microsoft.AspNetCore.Hosting;using Microsoft.AspNetCore.Mvc;using Microsoft.AspNetCore.Mvc.Rendering;using NetNote.IService;using NetNote.Models;using NetNote.ViewModels;// For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860namespace NetNote.Controllers{  public class NoteController : Controller  {    private INoteRepository _noteRepository;    private INoteTypeRepository _noteTypeRepository;    public NoteController(INoteRepository noteRepository, INoteTypeRepository noteTypeRepository)    {      _noteRepository = noteRepository;      _noteTypeRepository = noteTypeRepository;    }    // GET: /<controller>/    public IActionResult Index(int pageindex = 1)    {      var pagesize = 3;      var notes = _noteRepository.PageList(pageindex, pagesize);      ViewBag.PageCount = notes.Item2;      ViewBag.PageIndex = pageindex;      //var notes = await _noteRepository.GetListAsync();      return View(notes.Item1);    }    [HttpGet]    public async Task<IActionResult> Add()    {      var types = await _noteTypeRepository.GetListAsync();      ViewBag.Types = types.Select(r => new SelectListItem      {        Text = r.Name,        Value = r.Id.ToString()      });      return View();    }    [HttpPost]    public async Task<IActionResult> Add([FromServices] IHostingEnvironment env, NoteViewModel model)    {      if (!ModelState.IsValid)      {        return BadRequest(ModelState);      }      string filename = string.Empty;      if (model.Attachment != null)      {        filename = Path.Combine("file", Guid.NewGuid().ToString() + Path.GetExtension(model.Attachment.FileName));        using (var stream = new FileStream(Path.Combine(env.WebRootPath, filename), FileMode.CreateNew))        {          model.Attachment.CopyTo(stream);        }      }      await _noteRepository.AddAsync(new Note      {        Title = model.Title,        Content = model.Content,        CreateDate = model.CreateDate,        TypeId = model.Type,        Password=model.Password,        Attachment=filename      });      return RedirectToAction(nameof(Index));    }  }}